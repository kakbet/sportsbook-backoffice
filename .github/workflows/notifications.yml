# .github/workflows/notifications.yml (PHP Sportsbook version)
name: Send Notifications

on:
  workflow_call:
    inputs:
      project_name:
        description: 'Project name'
        required: true
        type: string
      project_emoji:
        description: 'Project emoji'
        required: false
        default: 'üêò'
        type: string
      version:
        description: 'Version'
        required: true
        type: string
      previous_version:
        description: 'Previous version'
        required: false
        type: string
      docker_image:
        description: 'Docker image URL'
        required: false
        type: string
      build_status:
        description: 'Build status (success/failure/warning)'
        required: true
        type: string
      additional_info:
        description: 'Additional info (JSON format)'
        required: false
        type: string
      slack_channel:
        description: 'Slack channel ID'
        required: false
        default: 'C090TV1RTKJ'
        type: string
    secrets:
      SLACK_BOT_TOKEN:
        required: false
      DISCORD_WEBHOOK:
        required: false
      TEAMS_WEBHOOK:
        required: false

jobs:
  slack-notification:
    runs-on: ubuntu-latest
    
    steps:
      - name: Check Slack Token
        id: check-slack
        run: |
          if [ -n "${{ secrets.SLACK_BOT_TOKEN }}" ]; then
            echo "token_available=true" >> $GITHUB_OUTPUT
          else
            echo "token_available=false" >> $GITHUB_OUTPUT
            echo "‚ö†Ô∏è Slack token not available, skipping notification"
          fi
      
      - name: Send Slack Notification
        if: steps.check-slack.outputs.token_available == 'true'
        uses: slackapi/slack-github-action@v1.26.0
        with:
          channel-id: '${{ inputs.slack_channel }}'
          payload: |
            {
              "text": "${{ inputs.build_status == 'success' && 'üêò PHP Sportsbook Build Successful! üöÄ' || inputs.build_status == 'failure' && 'üí• PHP Sportsbook Build Failed! ‚ùå' || '‚ö†Ô∏è PHP Sportsbook Build Warning! ‚ö†Ô∏è' }}",
              "blocks": [
                {
                  "type": "header",
                  "text": {
                    "type": "plain_text",
                    "text": "${{ inputs.build_status == 'success' && 'üêò PHP Sportsbook Build Successful! üöÄ' || inputs.build_status == 'failure' && 'üí• PHP Sportsbook Build Failed! ‚ùå' || '‚ö†Ô∏è PHP Sportsbook Build Warning! ‚ö†Ô∏è' }}"
                  }
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*üè∑Ô∏è Version: v${{ inputs.version }}*\n_Combined PHP Sportsbook Application Successfully Deployed!_"
                  }
                },
                {
                  "type": "section",
                  "fields": [
                    {
                      "type": "mrkdwn",
                      "text": "*üìÅ Project:*\n${{ inputs.project_name }}"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*üìÇ Repository:*\n<${{ github.server_url }}/${{ github.repository }}|${{ github.repository }}>"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*üè∑Ô∏è New Version:*\n`v${{ inputs.version }}`"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*üè∑Ô∏è Previous Version:*\n`v${{ inputs.previous_version || 'N/A' }}`"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*üë§ Triggered By:*\n${{ github.actor }}"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*üìÖ Build Date:*\n$(date -u +'%Y-%m-%d %H:%M:%S UTC')"
                    }
                  ]
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*üê≥ Docker Images:*\n‚Ä¢ **PHP App**: `${{ inputs.docker_image || 'N/A' }}`\n‚Ä¢ **Nginx**: `${{ fromJSON(inputs.additional_info || '{}').nginx_image || 'N/A' }}`"
                  }
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*üèóÔ∏è Build Details:*\n‚Ä¢ **Framework**: Custom PHP Framework\n‚Ä¢ **Status**: ${{ inputs.build_status }}\n‚Ä¢ **Multi-Repository**: Super + PGF + PGLib\n‚Ä¢ **PHP Version**: 8.3\n‚Ä¢ **Nginx**: Reverse Proxy Included"
                  }
                },
                {
                  "type": "actions",
                  "elements": [
                    {
                      "type": "button",
                      "text": {
                        "type": "plain_text",
                        "text": "üè∑Ô∏è View Release v${{ inputs.version }}"
                      },
                      "url": "${{ github.server_url }}/${{ github.repository }}/releases/tag/v${{ inputs.version }}",
                      "style": "primary"
                    },
                    {
                      "type": "button",
                      "text": {
                        "type": "plain_text",
                        "text": "üîß View Workflow"
                      },
                      "url": "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
                    }
                  ]
                }
              ]
            }
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}

  discord-notification:
    runs-on: ubuntu-latest
    
    steps:
      - name: Check Discord Webhook
        id: check-discord
        run: |
          if [ -n "${{ secrets.DISCORD_WEBHOOK }}" ]; then
            echo "webhook_available=true" >> $GITHUB_OUTPUT
          else
            echo "webhook_available=false" >> $GITHUB_OUTPUT
            echo "‚ö†Ô∏è Discord webhook not available, skipping notification"
          fi
      
      - name: Send Discord Notification
        if: steps.check-discord.outputs.webhook_available == 'true'
        run: |
          # Build status i√ßin color ve emoji belirle
          case "${{ inputs.build_status }}" in
            "success")
              STATUS_EMOJI="‚úÖ"
              STATUS_COLOR="3066993"
              ;;
            "failure")
              STATUS_EMOJI="‚ùå"
              STATUS_COLOR="15158332"
              ;;
            *)
              STATUS_EMOJI="‚ö†Ô∏è"
              STATUS_COLOR="16776960"
              ;;
          esac
          
          curl -H "Content-Type: application/json" \
               -d '{
                 "embeds": [{
                   "title": "${{ inputs.project_emoji }} ${{ inputs.project_name }} Build ${{ inputs.build_status }}",
                   "description": "Version **v${{ inputs.version }}** has been built and deployed!\n\nüì¶ **Included Projects:**\n‚Ä¢ Super (www)\n‚Ä¢ PGF Framework\n‚Ä¢ PGLib Library\n‚Ä¢ Nginx Reverse Proxy",
                   "color": '"$STATUS_COLOR"',
                   "fields": [
                     {"name": "üè∑Ô∏è Version", "value": "v${{ inputs.version }}", "inline": true},
                     {"name": "üêò PHP Version", "value": "8.3", "inline": true},
                     {"name": "üë§ Triggered by", "value": "${{ github.actor }}", "inline": true},
                     {"name": "üìÇ Repository", "value": "[${{ github.repository }}](${{ github.server_url }}/${{ github.repository }})", "inline": false},
                     {"name": "üê≥ PHP Image", "value": "`${{ inputs.docker_image }}`", "inline": false},
                     {"name": "üåê Nginx Image", "value": "`${{ fromJSON(inputs.additional_info || '{}').nginx_image || 'N/A' }}`", "inline": false}
                   ],
                   "timestamp": "'"$(date -u +%Y-%m-%dT%H:%M:%SZ)"'"
                 }]
               }' \
               ${{ secrets.DISCORD_WEBHOOK }}

  teams-notification:
    runs-on: ubuntu-latest
    
    steps:
      - name: Check Teams Webhook
        id: check-teams
        run: |
          if [ -n "${{ secrets.TEAMS_WEBHOOK }}" ]; then
            echo "webhook_available=true" >> $GITHUB_OUTPUT
          else
            echo "webhook_available=false" >> $GITHUB_OUTPUT
            echo "‚ö†Ô∏è Teams webhook not available, skipping notification"
          fi
      
      - name: Send Teams Notification
        if: steps.check-teams.outputs.webhook_available == 'true'
        run: |
          # Build status i√ßin color belirle
          case "${{ inputs.build_status }}" in
            "success")
              STATUS_COLOR="Good"
              ;;
            "failure")
              STATUS_COLOR="Attention"
              ;;
            *)
              STATUS_COLOR="Warning"
              ;;
          esac
          
          curl -H "Content-Type: application/json" \
               -d '{
                 "@type": "MessageCard",
                 "@context": "http://schema.org/extensions",
                 "themeColor": "'"$STATUS_COLOR"'",
                 "summary": "${{ inputs.project_name }} Build ${{ inputs.build_status }}",
                 "sections": [{
                   "activityTitle": "${{ inputs.project_emoji }} ${{ inputs.project_name }} Build ${{ inputs.build_status }}",
                   "activitySubtitle": "Version v${{ inputs.version }} deployed - Multi-Repository PHP Application with Nginx",
                   "facts": [
                     {"name": "Version", "value": "v${{ inputs.version }}"},
                     {"name": "Repository", "value": "${{ github.repository }}"},
                     {"name": "PHP Version", "value": "8.3"},
                     {"name": "Framework", "value": "Custom PHP Framework"},
                     {"name": "Triggered by", "value": "${{ github.actor }}"},
                     {"name": "Build Date", "value": "'"$(date -u +%Y-%m-%d\ %H:%M:%S\ UTC)"'"},
                     {"name": "Projects", "value": "Super + PGF + PGLib + Nginx"}
                   ]
                 }],
                 "potentialAction": [{
                   "@type": "OpenUri",
                   "name": "View Release",
                   "targets": [{"os": "default", "uri": "${{ github.server_url }}/${{ github.repository }}/releases/tag/v${{ inputs.version }}"}]
                 }]
               }' \
               ${{ secrets.TEAMS_WEBHOOK }}